<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/rabbit
	http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 定义rabbitmq连接工厂 -->
    <!--    <rabbit:connection-factory id="connectionFactory" host="114.215.83.3" port="5672"
                               username="test" password="123456" virtual-host="/vhost_mmr"/>-->
    <rabbit:connection-factory id="rmq-connectionFactory" addresses="${rabbitmq.address}" />

    <!--通过指定下面的rabbitmq admin信息，当前的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="rmq-connectionFactory" />

    <!-- 声明队列，
     auto-declare: 设置为true(默认值)时，容器将使用RabbitAdmin重新声明所有 AMQP objects(队列，交换，绑定)，如果它在启动过程中检测到至少有一个队列丢失，可能是因为它是auto-delete或过期队列，但如果队列因任何原因丢失，重新声明将继续进行。要禁用此行为，请将此 property 设置为false。
     durable : 队列中的消息是否持久化;
     exclusive : 仅创建者可以使用的私有队列，断开后自动删除;
     auto_delete : 当所有消费者客户端连接断开后，是否自动删除队列-->
    <rabbit:queue id="que_cat" name="que_cat" auto-declare="true" durable="false" exclusive="false" auto-delete="false"/>
    <rabbit:queue id="que_pig" name="que_pig" auto-declare="true" durable="false" exclusive="false" auto-delete="false"/>
    <rabbit:queue id="que_dog" name="que_dog" auto-declare="true" durable="false" exclusive="false" auto-delete="false"/>

    <!-- 定义交换机，并绑定队列（订阅模式）-->
<!--    <rabbit:fanout-exchange name="fanoutExchange" id="fanoutExchange">
        <rabbit:bindings>
            <rabbit:binding queue="que_dog"  />
        </rabbit:bindings>
    </rabbit:fanout-exchange>-->

    <!-- 定义交换机，并绑定队列（路由模式）-->
    <rabbit:direct-exchange name="myTestExchange" id="myTestExchange">
        <rabbit:bindings>
            <rabbit:binding queue="que_cat" key="que_cat_key" />
            <rabbit:binding queue="que_pig" key="que_pig_key" />
            <rabbit:binding queue="que_dog" key="que_dog_key" />
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 定义交换机，并绑定队列（主题模式/通配符模式）， #匹配一个或多个词  *匹配一个词-->
<!--    <rabbit:topic-exchange name="myTestExchange" id="myTestExchange">
        <rabbit:bindings>
            <rabbit:binding queue="que_cat" pattern="cat.#"/>
            <rabbit:binding queue="que_pig" pattern="pig.#" />
            <rabbit:binding queue="que_dog" pattern="dog.#" />
        </rabbit:bindings>
    </rabbit:topic-exchange>-->

    <!-- 消息对象json转换类 -->
    <bean id="jsonMessageConverter"
          class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />

    <!-- 订阅模式使用：定义消息模板类，用于数据的接收和发送 -->
      <!--  <rabbit:template id="rabbitTemplate"
                         connection-factory="rmq-connectionFactory" exchange="fanoutExchange"
                         message-converter="jsonMessageConverter" />-->

    <!-- 路由模式和主题模式使用：定义消息模板类，用于数据的接收和发送 -->
    <!-- 可配置routing-key属性，比如routing-key="que_pig_key"，表示
         可配置channel-transacted属性，比如channel-transacted="true" ，表示
         可配置exchange属性，只有当用到了交换机才需要配置，像工作队列模式、简单队列模式没使用到就不需要配置
    -->
    <rabbit:template id="rabbitTemplate"
                     connection-factory="rmq-connectionFactory"
                     exchange="myTestExchange"
                     message-converter="jsonMessageConverter" />

    <!-- amqp template 可根据不同业务定义多个不同的template-->
<!--    <rabbit:template id="rabbitTemplate2" connection-factory="rmq-connectionFactory"
                     message-converter="jsonMessageConverter" reply-timeout="2000"
                     routing-key="que_pig_key" exchange="myTestExchange" />-->

</beans>